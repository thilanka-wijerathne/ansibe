---
# tasks file for web-stg
- name: Create an IP address for first instance
  gcp_compute_address:
    name: "{{ name_zonea }}-ip"
    region: "{{ region }}"
    project: "{{ gcp_project }}"
    service_account_file: "{{ credentials_file }}"
    auth_kind: "{{ auth_kind }}"
  register: gcea_ip
  when: inventory_hostname in groups['local']

- name: Bring up the first instance in the first zone.
  gcp_compute_instance:
    name: "{{ name_zonea }}"
    machine_type: "{{ machine_type }}"
    disks:
      - auto_delete: true
        boot: true
        initialize_params:
          disk_size_gb: 30
          source_image: "{{ image }}"
    network_interfaces:
      - access_configs:
          - name: External NAT
            nat_ip: "{{ gcea_ip }}"
            type: ONE_TO_ONE_NAT
    tags:
      items:
        - http-server
        - https-server
    zone: "{{ zone }}"
    project: "{{ gcp_project }}"
    service_account_file: "{{ credentials_file }}"
    auth_kind: "{{ auth_kind }}"
  register: gcea
  when: inventory_hostname in groups['local']

- name: Create an IP address for second instance
  gcp_compute_address:
    name: "{{ name_zoneb }}-ip"
    region: "{{ region }}"
    project: "{{ gcp_project }}"
    service_account_file: "{{ credentials_file }}"
    auth_kind: "{{ auth_kind }}"
  register: gceb_ip
  when: inventory_hostname in groups['local']

- name: Bring up the instance in the second zone.
  gcp_compute_instance:
    name: "{{ name_zoneb }}"
    machine_type: "{{ machine_type }}"
    disks:
      - auto_delete: true
        boot: true
        initialize_params:
          disk_size_gb: 30
          source_image: "{{ image }}"
    network_interfaces:
      - access_configs:
          - name: External NAT
            nat_ip: "{{ gceb_ip }}"
            type: ONE_TO_ONE_NAT
    tags:
      items:
        - http-server
        - https-server
    zone: "{{ zone }}"
    project: "{{ gcp_project }}"
    service_account_file: "{{ credentials_file }}"
    auth_kind: "{{ auth_kind }}"
  register: gceb
  when: inventory_hostname in groups['local']

- name: Wait for SSH for instances in first zone
  wait_for: delay=1 host={{ gcea_ip.address }} port=22 state=started timeout=30
  when: inventory_hostname in groups['local']
- name: Save host data for first zone
  add_host: hostname={{ gcea_ip.address }} groupname=gce_instances_ips
  when: inventory_hostname in groups['local']
- name: Wait for SSH for instances in second zone
  wait_for: delay=1 host={{ gceb_ip.address }} port=22 state=started timeout=30
  when: inventory_hostname in groups['local']
- name: Save host data for second zone
  add_host: hostname={{ gceb_ip.address }} groupname=gce_instances_ips
  when: inventory_hostname in groups['local']

- name: Set a hostname
  hostname:
    name: LT-2021-060-webserver1
  when: ansible_facts['hostname'] == "myinstance1"
- name: Set a hostname
  hostname:
    name: LT-2021-060-webserver2
  when: ansible_facts['hostname'] == "myinstance2"

- name: Pause for 5 seconds 
  pause:
    seconds: 5

- name: install apache
  apt:
    name: apache2
    state: latest
  when: (ansible_facts['hostname'] == "LT-2021-060-webserver1") or (ansible_facts['hostname'] == "LT-2021-060-webserver2") 

- name: start the service
  service:
    name: apache2
    state: started
    enabled: true
  when: (ansible_facts['hostname'] == "LT-2021-060-webserver1") or (ansible_facts['hostname'] == "LT-2021-060-webserver2")

- name: copy files
  template:
    src: html.j2
    dest: /var/www/html/index.html
  notify: restart apache
  when: (ansible_facts['hostname'] == "LT-2021-060-webserver1") or (ansible_facts['hostname'] == "LT-2021-060-webserver2")

